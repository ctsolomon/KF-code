####################
#Run Kalman filter
#Set working directory
setwd('C:/Users/csolom7/Documents/Research projects/C model/KF code')
#Load function
source('kalmanStep.R')
source('kalmanState.R')
#Load test data
load('C:/Users/csolom7/Documents/Research projects/C model/Data/Test/testData')
#Initial guess of parameters
log(truePars["sProcDIC"]^2)
log(truePars["sProcDOC"]^2)
parGuess <- c(0.001,8e-07,0.3,9,13) #r, iota, k, log(DIC process error variance), log(DOC process error variance)
#Initial estimate of observation error covariance matrix
H <- matrix(c(10^2,0,0,100^2),nrow=2,byrow=TRUE)
#Check that kalmanStep function works
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
lakeCObs
#Run Kalman filter
fit <- optim(parGuess,kalmanStep,control=list(maxit=1e6),Y=lakeCObs[,2:3],H=H,drivers=data1)
fit
#Pull together true, guess, and ML parameter values and compare
#All parameters in natural units (no log-transformed values), and proc errors expressed as sd
guessPars <- parGuess
guessPars[4:5] <- sqrt(exp(guessPars[4:5]))
estPars <- fit$par
estPars[4:5] <- sqrt(exp(estPars[4:5]))
parsMatrix <- rbind(truePars,guessPars,estPars)
colnames(parsMatrix) <- c("r","iota","k","sProcDIC","sProcDOC")
rownames(parsMatrix) <- c("true","guess","ML")
print(signif(parsMatrix,3))
str(lakeCObs)
#Introduce some NAs to the observed state variable time series
lakeCObs[10,"DIC"] <- NA
lakeCObs[20,c("DIC","DOC")] <- NA
lakeCObs[9:22,]
#Initial guess of parameters
log(truePars["sProcDIC"]^2)
log(truePars["sProcDOC"]^2)
parGuess <- c(0.001,8e-07,0.3,9,13) #r, iota, k, log(DIC process error variance), log(DOC process error variance)
#Initial estimate of observation error covariance matrix
H <- matrix(c(10^2,0,0,100^2),nrow=2,byrow=TRUE)
#Check that kalmanStep function works
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
debug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
? debug
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
isdebugged(kalmanStep)
debug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
isdebugged(kalmanStep)
undebug(kalmanStep)
debug(kalmanSTep)
debug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
all(is.na(y)
)
t
y
all(is.na(y))
is.na(y)
avail <- which(is.na(y)==FALSE)
avail
nT <- length(avail)
W <- matrix(0,nrow=nT,ncol=nVar,byrow=TRUE)
W
W[cbind((1:length(avail)),avail)]
1:length(avail)
avail
cbind((1:length(avail)),avail)
cbind((1:length(avail)),avail)
W
W[cbind((1:length(avail)),avail)]
W[cbind((1:length(avail)),avail)] <- 1
y[which(is.na(y))] <- 0 #To make matrix math in next line work
yT <- W %*% y
yT
#Update
V = yT-a[avail]  # residuals
F = P+H #P[avail,avail]+H[avail,avail]  ###>>>>>>>>>Need to deal with dimensions here
Finv_P = solve(F,P)
Finv_V = solve(F,V)
a = a + (P %*% Finv_V)
P = P - (P %*% Finv_P)
#Accumulate likelihood terms
logdetF = c( logdetF, 0.5*log(det(F)) )
VFV = c( VFV, 0.5*t(V)%*%Finv_V )
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
t
t
Y[1:12,]
t
VFV
avail
W
yT
t
y
all(is.na(y))
avail
y
avail
nT
W
W
y
y
yT
V
a
y
y-a
F
P
H
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
t
P
H
F
V
yT
solve(F,P)
solve(F,V)
avail
P[avail,avail]
P
H[avail,avail]
H
F = P[avail,avail]+H[avail,avail] #P[avail,avail]+H[avail,avail]  ###>>>>>>>>>Need to deal with dimensions here
Finv_P = solve(F,P)
F
solve(F[avail,avail],P[avail,avail])
F = P+H
solve(F[avail,avail],P[avail,avail])
solve(F[avail,avail],V[avail,avail])
solve(F[avail,avail],V)
V = yT-a[avail]  # residuals
F = P+H #P[avail,avail]+H[avail,avail]  ###>>>>>>>>>Need to deal with dimensions here
Finv_P = solve(F[avail,avail],P[avail,avail])
Finv_V = solve(F[avail,avail],V)
a = a + (P %*% Finv_V)
P
Finv_V
a = a + (P[avail,avail] %*% Finv_V)
a
a[avail,avail] = a[avail,avail] + (P[avail,avail] %*% Finv_V)
dim(a)
avail
a[avail,] = a[avail,] + (P[avail,avail] %*% Finv_V)
P[avail,avail] = P[avail,avail] - (P[avail,avail] %*% Finv_P)
#Accumulate likelihood terms
logdetF = c( logdetF, 0.5*log(det(F)) )
VFV = c( VFV, 0.5*t(V)%*%Finv_V )
undebug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
undebug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
source('C:/Users/csolom7/Documents/Research projects/C model/KF code/kalmanStep.R')
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
fit <- optim(parGuess,kalmanStep,control=list(maxit=1e6),Y=lakeCObs[,2:3],H=H,drivers=data1)
fit
#Pull together true, guess, and ML parameter values and compare
#All parameters in natural units (no log-transformed values), and proc errors expressed as sd
guessPars <- parGuess
guessPars[4:5] <- sqrt(exp(guessPars[4:5]))
estPars <- fit$par
estPars[4:5] <- sqrt(exp(estPars[4:5]))
parsMatrix <- rbind(truePars,guessPars,estPars)
colnames(parsMatrix) <- c("r","iota","k","sProcDIC","sProcDOC")
rownames(parsMatrix) <- c("true","guess","ML")
print(signif(parsMatrix,3))
debug(kalmanStep)
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
t
Y
t
a
P
a
P
avail
avail
avail
V
F
Finv_P
Finv_V
a
a
P
P
t
Y
y
a
avail
W
W
yT
y
V
F
Finv_P
Finv_V
a
a
P
t
t
t
y
a
P
undebug(kalmanStep)
ttt <- matrix(rep(2,4),nrow=2)
ttt
? cbind
xxx <- matrix(rep(3,4),nrow=2)
? require
library(abind)
? abind
abind(ttt,xxx)
abind(ttt,xxx,along=3)
zzz <- abind(ttt,xxx,along=3)
abind(zzz,ttt,along=3)
rm(list=ls())
####################
#Run Kalman filter
#Set working directory
setwd('C:/Users/csolom7/Documents/Research projects/C model/KF code')
#Load function
source('kalmanStep.R')
source('kalmanState.R')
#Load test data
load('C:/Users/csolom7/Documents/Research projects/C model/Data/Test/testData')
#Initial guess of parameters
log(truePars["sProcDIC"]^2)
log(truePars["sProcDOC"]^2)
parGuess <- c(0.001,8e-07,0.3,9,13) #r, iota, k, log(DIC process error variance), log(DOC process error variance)
#Initial estimate of observation error covariance matrix
H <- matrix(c(10^2,0,0,100^2),nrow=2,byrow=TRUE)
#Check that kalmanStep function works
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
#Run Kalman filter
fit <- optim(parGuess,kalmanStep,control=list(maxit=1e6),Y=lakeCObs[,2:3],H=H,drivers=data1)
fit
#Pull together true, guess, and ML parameter values and compare
#All parameters in natural units (no log-transformed values), and proc errors expressed as sd
guessPars <- parGuess
guessPars[4:5] <- sqrt(exp(guessPars[4:5]))
estPars <- fit$par
estPars[4:5] <- sqrt(exp(estPars[4:5]))
parsMatrix <- rbind(truePars,guessPars,estPars)
colnames(parsMatrix) <- c("r","iota","k","sProcDIC","sProcDOC")
rownames(parsMatrix) <- c("true","guess","ML")
print(signif(parsMatrix,3))
#Run KF with ML parameter estimates to pull out estimates of state
stateEst <- kalmanState(p=fit$par,Y=lakeCObs[,2:3],H=H,drivers=data1)
source('C:/Users/csolom7/Documents/Research projects/C model/KF code/kalmanState.R')
stateEst <- kalmanState(p=fit$par,Y=lakeCObs[,2:3],H=H,drivers=data1)
attributes(stateEst)
source('C:/Users/csolom7/Documents/Research projects/C model/KF code/kalmanState.R')
stateEst <- kalmanState(p=fit$par,Y=lakeCObs[,2:3],H=H,drivers=data1)
#Plot these state estimates along with the simulated (and maybe observed?) data
plot(DIC~time,data=lakeCSim,type='l',xlab="DOY",ylab="Lake C (mol)")
points(stateEst$a[1,]~lakeCSim$time,type='l',col='blue')
colnames(lakeCObs)
plot(DIC~time,data=lakeCObs)
plot(DIC~time,data=lakeCObs,type='l')
points(stateEst$a[1,]~lakeCObs$time,type='l',col='blue')
plot(DOC~time,data=lakeCObs,type='l')
points(stateEst$a[2,]~lakeCObs$time,type='l',col='blue')
stateEst$P[,,1:3]
stateEst$P[,,30:32]
keepRows <- seq(1,dim(lakeCObs)[1],5)
keepRows
lakeCObs[-keepRows,2:3] <- NA
head(lakeCObs)
fit <- optim(parGuess,kalmanStep,control=list(maxit=1e6),Y=lakeCObs[,2:3],H=H,drivers=data1)
fit
#Pull together true, guess, and ML parameter values and compare
#All parameters in natural units (no log-transformed values), and proc errors expressed as sd
guessPars <- parGuess
guessPars[4:5] <- sqrt(exp(guessPars[4:5]))
estPars <- fit$par
estPars[4:5] <- sqrt(exp(estPars[4:5]))
parsMatrix <- rbind(truePars,guessPars,estPars)
colnames(parsMatrix) <- c("r","iota","k","sProcDIC","sProcDOC")
rownames(parsMatrix) <- c("true","guess","ML")
print(signif(parsMatrix,3))
#Run KF with ML parameter estimates to pull out estimates of state
stateEst <- kalmanState(p=fit$par,Y=lakeCObs[,2:3],H=H,drivers=data1)
plot(DIC~time,data=lakeCObs)
points(stateEst$a[1,]~lakeCObs$time,type='l',col='blue')
load('C:/Users/csolom7/Documents/Research projects/C model/Data/Test/testData')
lakeCObs
points(DIC~time,data=lakeCObs,type='l')
dim(stateEst$P)
keepRows
stateEst$P[,,91]
sd <- sqrt(stateEst$P[1,1,91])
sd
sd <- sqrt(stateEst$P[1,1,92])
stateEst$P[,,92]
par(mfrow=c(1,2),mar=c(4.1,4.1,1.1,1.1))
plot(DIC~time,data=lakeCObs,xlab="DOY",ylab="DIC (mol)")
par(mfrow=c(2,1),mar=c(4.1,4.1,1.1,1.1))
plot(DIC~time,data=lakeCObs,xlab="DOY",ylab="DIC (mol)")
head(stateEst$a)
rm(list=ls())
#Set working directory
setwd('C:/Users/csolom7/Documents/Research projects/C model/KF code')
#Load function
source('kalmanStep.R')
source('kalmanState.R')
#Load test data
load('C:/Users/csolom7/Documents/Research projects/C model/Data/Test/testData')
#Keep only every 5th observation
keepRows <- seq(1,dim(lakeCObs)[1],5)
lakeCObs[-keepRows,2:3] <- NA
#Initial guess of parameters
log(truePars["sProcDIC"]^2)
log(truePars["sProcDOC"]^2)
parGuess <- c(0.001,8e-07,0.3,9,13) #r, iota, k, log(DIC process error variance), log(DOC process error variance)
#Initial estimate of observation error covariance matrix
H <- matrix(c(10^2,0,0,100^2),nrow=2,byrow=TRUE)
#Check that kalmanStep function works
kalmanStep(p=parGuess,Y=lakeCObs[,2:3],H=H,drivers=data1)
#Run Kalman filter
fit <- optim(parGuess,kalmanStep,control=list(maxit=1e6),Y=lakeCObs[,2:3],H=H,drivers=data1)
fit
#Pull together true, guess, and ML parameter values and compare
#All parameters in natural units (no log-transformed values), and proc errors expressed as sd
guessPars <- parGuess
guessPars[4:5] <- sqrt(exp(guessPars[4:5]))
estPars <- fit$par
estPars[4:5] <- sqrt(exp(estPars[4:5]))
parsMatrix <- rbind(truePars,guessPars,estPars)
colnames(parsMatrix) <- c("r","iota","k","sProcDIC","sProcDOC")
rownames(parsMatrix) <- c("true","guess","ML")
print(signif(parsMatrix,3))
#Run KF with ML parameter estimates to pull out estimates of state
stateEst <- kalmanState(p=fit$par,Y=lakeCObs[,2:3],H=H,drivers=data1)
#Plot observed data, estimated states, and rough 95% CI for predicted state (+- 2 sd)
par(mfrow=c(2,1),mar=c(4.1,4.1,1.1,1.1))
plot(DIC~time,data=lakeCSim,type='l',xlab="DOY",ylab="Lake C (mol)")
points(stateEst$a[1,]~lakeCSim$time,type='l')
sd <- sqrt(stateEst$P[1,1,])
points(lakeCSim$time,(stateEst$a[1,]+sd),type='l',col='gray')
points(lakeCSim$time,(stateEst$a[1,]-sd),type='l',col='gray')
par(mfrow=c(2,1),mar=c(4.1,4.1,1.1,1.1))
plot(DIC~time,data=lakeCObs,type='l',xlab="DOY",ylab="Lake C (mol)")
plot(DIC~time,data=lakeCObs,xlab="DOY",ylab="Lake C (mol)")
par(mfrow=c(2,1),mar=c(4.1,4.1,1.1,1.1))
plot(DIC~time,data=lakeCObs,xlab="DOY",ylab="Lake C (mol)")
points(stateEst$a[1,]~lakeCSim$time,type='l')
points(stateEst$a[1,]~lakeCObs$time,type='l')
sd <- sqrt(stateEst$P[1,1,])
points(lakeCSim$time,(stateEst$a[1,]+sd),type='l',col='gray')
points(lakeCObs$time,(stateEst$a[1,]+sd),type='l',col='gray')
points(lakeCObs$time,(stateEst$a[1,]-sd),type='l',col='gray')
par(mfrow=c(2,1),mar=c(3.1,3.1,1.1,1.1))
plot(DIC~time,data=lakeCObs,xlab="DOY",ylab="Lake C (mol)")
points(stateEst$a[1,]~lakeCObs$time,type='l')
sd <- sqrt(stateEst$P[1,1,])
points(lakeCObs$time,(stateEst$a[1,]+2*sd),type='l',col='gray')
points(lakeCObs$time,(stateEst$a[1,]-2*sd),type='l',col='gray')
plot(DOC~time,data=lakeCObs,xlab="DOY",ylab="Lake C (mol)")
points(stateEst$a[2,]~lakeCObs$time,type='l')
sd <- sqrt(stateEst$P[2,2,])
points(lakeCObs$time,(stateEst$a[2,]+2*sd),type='l',col='gray')
points(lakeCObs$time,(stateEst$a[2,]-2*sd),type='l',col='gray')
